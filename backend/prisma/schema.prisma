// Datasource
datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

// Generator
generator client {
	provider = "prisma-client-js"
}

model Ward {
	id                 String   @id @default(uuid()) @db.Uuid
	name               String
	hourlyGranularity  Boolean  @default(false)

	// Organisational hierarchy (nullable)
	hospitalId String? @db.Uuid
	hospital   Hospital? @relation(fields: [hospitalId], references: [id], onDelete: SetNull)

	// Timestamps
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	// Relations
	staff     Staff[] @relation("StaffWards")
	demands   Demand[]
	schedules Schedule[]
	assignments Assignment[]
	ruleSets  RuleSet[]

	@@index([hospitalId])
}

model Job {
	id   String @id @default(uuid()) @db.Uuid
	code String @unique
	name String

	// Relations
	staff Staff[]
}

model Skill {
	id   String @id @default(uuid()) @db.Uuid
	code String @unique
	name String

	// Relations
	staff Staff[] @relation("StaffSkills")
}

model Staff {
	id                    String     @id @default(uuid()) @db.Uuid
	fullName              String
	role                  StaffRole
	gradeBand             String?
	contractHoursPerWeek  Float
	active                Boolean @default(true)

	// Relations
	jobId String @db.Uuid
	job   Job    @relation(fields: [jobId], references: [id])

	// Many-to-many
	wards  Ward[] @relation("StaffWards")
	skills Skill[] @relation("StaffSkills")

	// Relations
	assignments Assignment[]
	preferences Preference[]
}

enum StaffRole {
	doctor
	nurse
}

model ShiftType {
	id              String @id @default(uuid()) @db.Uuid
	code            String @unique
	name            String
	startTime       String
	endTime         String
	isNight         Boolean
	durationMinutes Int

	// Organisational hierarchy (nullable)
	scope      String? @db.VarChar(20) // 'TRUST', 'HOSPITAL', 'WARD', 'SCHEDULE'
	trustId    String? @db.Uuid
	hospitalId String? @db.Uuid
	wardId     String? @db.Uuid

	assignments Assignment[]

	@@index([scope, trustId, hospitalId, wardId])
	@@unique([scope, trustId, hospitalId, wardId, code])
}

model Demand {
	id               String      @id @default(uuid()) @db.Uuid
	wardId           String      @db.Uuid
	ward             Ward        @relation(fields: [wardId], references: [id])
	date             DateTime
	granularity      Granularity
	slot             String
	requiredBySkill  Json

	@@index([wardId, date, slot])
}

enum Granularity {
	shift
	hour
}

model RuleSet {
	id        String   @id @default(uuid()) @db.Uuid
	wardId    String   @db.Uuid
	ward      Ward     @relation(fields: [wardId], references: [id])
	name      String
	active    Boolean  @default(false)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	// Organisational hierarchy (nullable)
	scope      String? @db.VarChar(20) // 'TRUST', 'HOSPITAL', 'WARD', 'SCHEDULE'
	trustId    String? @db.Uuid
	hospitalId String? @db.Uuid

	// Rules
	minRestHours         Int  @default(11)
	maxConsecutiveNights Int  @default(3)
	oneShiftPerDay       Boolean @default(true)

	// Relations
	rules Rule[]

	@@index([scope, trustId, hospitalId, wardId])
}

model Rule {
	id        String   @id @default(uuid()) @db.Uuid
	ruleSetId String   @db.Uuid
	ruleSet   RuleSet  @relation(fields: [ruleSetId], references: [id])
	type      String
	value     Json
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Schedule {
	id           String         @id @default(uuid()) @db.Uuid
	wardId       String         @db.Uuid
	ward         Ward           @relation(fields: [wardId], references: [id])
	horizonStart DateTime
	horizonEnd   DateTime
	objective    String?
	status       ScheduleStatus @default(draft)
	createdAt    DateTime       @default(now())
	updatedAt    DateTime       @updatedAt

	// Relations
	assignments Assignment[]
	events      Event[]
	locks       Lock[]

	@@unique([wardId, status])
}

enum ScheduleStatus {
	draft
	published
}

model Assignment {
	id           String     @id @default(uuid()) @db.Uuid
	scheduleId   String     @db.Uuid
	schedule     Schedule   @relation(fields: [scheduleId], references: [id])
	wardId       String     @db.Uuid
	ward         Ward       @relation(fields: [wardId], references: [id])
	staffId      String     @db.Uuid
	staff        Staff      @relation(fields: [staffId], references: [id])
	shiftTypeId  String     @db.Uuid
	shiftType    ShiftType  @relation(fields: [shiftTypeId], references: [id])
	date         DateTime
	slot         String
	createdAt    DateTime   @default(now())
	updatedAt    DateTime   @updatedAt

	@@index([scheduleId])
	@@index([wardId, date, slot])
}

model Lock {
	id         String   @id @default(uuid()) @db.Uuid
	scheduleId String   @db.Uuid
	schedule   Schedule @relation(fields: [scheduleId], references: [id])
	staffId    String   @db.Uuid
	wardId     String   @db.Uuid
	date       DateTime
	slot       String

	@@index([scheduleId])
}

model Preference {
	id        String   @id @default(uuid()) @db.Uuid
	staffId   String   @db.Uuid
	staff     Staff    @relation(fields: [staffId], references: [id])
	date      DateTime
	preferOff Boolean?
	preferOn  Boolean?
}

model Event {
	id         String   @id @default(uuid()) @db.Uuid
	scheduleId String   @db.Uuid
	schedule   Schedule @relation(fields: [scheduleId], references: [id])
	type       String
	payload    Json
	createdAt  DateTime @default(now())
}

model Policy {
	id           String @id @default(uuid()) @db.Uuid
	scope        String @db.VarChar(20) // 'TRUST', 'HOSPITAL', 'WARD', 'SCHEDULE'
	orgId        String?
	wardId       String?
	scheduleId   String?
	weights      Json
	limits       Json
	toggles      Json
	substitution Json
	timeBudgetMs Int
	label        String
	isActive     Boolean @default(true)
	createdAt    DateTime @default(now())
	updatedAt    DateTime @updatedAt

	// Organisational hierarchy (nullable)
	trustId    String? @db.Uuid
	hospitalId String? @db.Uuid

	@@unique([scope, orgId, wardId, scheduleId])
	@@index([scope, trustId, hospitalId, wardId, scheduleId, isActive])
}

// ============================================================================
// ORGANISATIONAL HIERARCHY (ADDITIVE ONLY - NO BREAKING CHANGES)
// ============================================================================

// Scope levels are string-based for flexibility
// Valid values: 'TRUST', 'HOSPITAL', 'WARD', 'SCHEDULE'

model Trust {
	id        String     @id @default(uuid()) @db.Uuid
	name      String     @unique @db.VarChar(120)
	createdAt DateTime   @default(now())
	updatedAt DateTime   @updatedAt

	// Relations
	hospitals Hospital[]
}

model Hospital {
	id        String   @id @default(uuid()) @db.Uuid
	name      String   @db.VarChar(120)
	trustId   String?  @db.Uuid
	trust     Trust?   @relation(fields: [trustId], references: [id], onDelete: SetNull)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	// Relations
	wards Ward[]

	@@index([trustId])
	@@unique([trustId, name])
}

